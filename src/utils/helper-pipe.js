"use strict";
var utils_1 = require('../utils/utils');
function OrderByArrayHelper(values, orderType, descending) {
    if (descending === void 0) { descending = false; }
    try {
        return values.sort(function (a, b) {
            if (a[orderType] < b[orderType]) {
                return descending ? 1 : -1;
            }
            else if (a[orderType] > b[orderType]) {
                return descending ? -1 : 1;
            }
            return 0;
        });
    }
    catch (e) {
        throw e;
    }
}
exports.OrderByArrayHelper = OrderByArrayHelper;
function OrderByDateHelper(values, descending) {
    if (descending === void 0) { descending = false; }
    try {
        if (descending) {
            values.sort(function (a, b) {
                return new Date(a).getTime() - new Date(b).getTime();
            });
        }
        else {
            values.sort(function (a, b) {
                return new Date(b).getTime() - new Date(a).getTime();
            });
        }
    }
    catch (e) {
        throw e;
    }
    return values;
}
exports.OrderByDateHelper = OrderByDateHelper;
function OrderByNumberHelper(values, descending) {
    if (descending === void 0) { descending = false; }
    try {
        if (descending) {
            values.sort(function (a, b) { return b - a; });
        }
        else {
            values.sort(function (a, b) { return a - b; });
        }
    }
    catch (e) {
        throw e;
    }
    return values;
}
exports.OrderByNumberHelper = OrderByNumberHelper;
function OrderByStringHelper(values, descending) {
    if (descending === void 0) { descending = false; }
    try {
        if (descending) {
            values.sort(function (a, b) { return 0 - (a > b ? 1 : -1); });
        }
        else {
            values.sort();
        }
    }
    catch (e) {
        throw e;
    }
    return values;
}
exports.OrderByStringHelper = OrderByStringHelper;
// I saw this online. Needed to test.
function OrderByMultiplePropertiesHelper(values, properties) {
    return values.sort(function (a, b) {
        properties.forEach(function (property) {
            var desc = utils_1.isDescending(property);
            var propertyToCheck = !desc
                ? property
                : property.substr(1);
            var comparison = !desc ?
                OrderByComparator(a[propertyToCheck], b[propertyToCheck])
                : -OrderByComparator(a[propertyToCheck], b[propertyToCheck]);
            // Don't return 0 yet in case of needing to sort by next property
            if (comparison != 0) {
                return comparison;
            }
        });
        return 0; // equal each other
    });
}
exports.OrderByMultiplePropertiesHelper = OrderByMultiplePropertiesHelper;
function OrderByComparator(a, b) {
    // TODO compare different type of properties.
    return 0; // equal each other
}
exports.OrderByComparator = OrderByComparator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUVqRSxpRUFBaUU7WUFDakUsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFDdEIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtJQUNqQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFwQmUsdUNBQStCLGtDQW9COUMsQ0FBQTtBQUVELDJCQUFrQyxDQUFNLEVBQUUsQ0FBTTtJQUU1Qyw2Q0FBNkM7SUFFN0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtBQUNqQyxDQUFDO0FBTGUseUJBQWlCLG9CQUtoQyxDQUFBIiwiZmlsZSI6InV0aWxzL2hlbHBlci1waXBlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZXNjZW5kaW5nIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE9yZGVyQnlBcnJheUhlbHBlcih2YWx1ZXM6IGFueVtdLCBvcmRlclR5cGU6IHN0cmluZywgZGVzY2VuZGluZzogYm9vbGVhbiA9IGZhbHNlKTogYW55W10ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gdmFsdWVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGFbb3JkZXJUeXBlXSA8IGJbb3JkZXJUeXBlXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NlbmRpbmcgPyAxIDogLTE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYVtvcmRlclR5cGVdID4gYltvcmRlclR5cGVdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzY2VuZGluZyA/IC0xIDogMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gT3JkZXJCeURhdGVIZWxwZXIodmFsdWVzOiBhbnlbXSwgZGVzY2VuZGluZzogYm9vbGVhbiA9IGZhbHNlKTogYW55W10ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICB2YWx1ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGEpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShiKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE9yZGVyQnlOdW1iZXJIZWxwZXIodmFsdWVzOiBudW1iZXJbXSwgZGVzY2VuZGluZzogYm9vbGVhbiA9IGZhbHNlKTogbnVtYmVyW10ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICB2YWx1ZXMuc29ydChmdW5jdGlvbiAoYTogbnVtYmVyLCBiOiBudW1iZXIpIHsgcmV0dXJuIGIgLSBhOyB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZXMuc29ydChmdW5jdGlvbiAoYTogbnVtYmVyLCBiOiBudW1iZXIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBPcmRlckJ5U3RyaW5nSGVscGVyKHZhbHVlczogc3RyaW5nW10sIGRlc2NlbmRpbmc6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZ1tdIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKGRlc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgdmFsdWVzLnNvcnQoKGEsIGIpID0+IDAgLSAoYSA+IGIgPyAxIDogLTEpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZXMuc29ydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlcztcclxufVxyXG4vLyBJIHNhdyB0aGlzIG9ubGluZS4gTmVlZGVkIHRvIHRlc3QuXHJcbmV4cG9ydCBmdW5jdGlvbiBPcmRlckJ5TXVsdGlwbGVQcm9wZXJ0aWVzSGVscGVyKHZhbHVlczogYW55W10sIHByb3BlcnRpZXM6IGFueVtdKSB7XHJcbiAgICByZXR1cm4gdmFsdWVzLnNvcnQoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgICAgICAgbGV0IGRlc2MgPSBpc0Rlc2NlbmRpbmcocHJvcGVydHkpO1xyXG4gICAgICAgICAgICBsZXQgcHJvcGVydHlUb0NoZWNrID0gIWRlc2NcclxuICAgICAgICAgICAgICAgID8gcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIDogcHJvcGVydHkuc3Vic3RyKDEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbXBhcmlzb24gPSAhZGVzYyA/XHJcbiAgICAgICAgICAgICAgICBPcmRlckJ5Q29tcGFyYXRvcihhW3Byb3BlcnR5VG9DaGVja10sIGJbcHJvcGVydHlUb0NoZWNrXSlcclxuICAgICAgICAgICAgICAgIDogLU9yZGVyQnlDb21wYXJhdG9yKGFbcHJvcGVydHlUb0NoZWNrXSwgYltwcm9wZXJ0eVRvQ2hlY2tdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIERvbid0IHJldHVybiAwIHlldCBpbiBjYXNlIG9mIG5lZWRpbmcgdG8gc29ydCBieSBuZXh0IHByb3BlcnR5XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJpc29uICE9IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJpc29uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiAwOyAvLyBlcXVhbCBlYWNoIG90aGVyXHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE9yZGVyQnlDb21wYXJhdG9yKGE6IGFueSwgYjogYW55KTogbnVtYmVyIHtcclxuXHJcbiAgICAvLyBUT0RPIGNvbXBhcmUgZGlmZmVyZW50IHR5cGUgb2YgcHJvcGVydGllcy5cclxuXHJcbiAgICByZXR1cm4gMDsgLy8gZXF1YWwgZWFjaCBvdGhlclxyXG59XHJcbiJdfQ==
