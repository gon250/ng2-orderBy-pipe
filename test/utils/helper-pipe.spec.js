"use strict";
var helper_pipe_1 = require('../../src/utils/helper-pipe');
var DESCENDING = true;
describe('OrderByDateHelper Test', function () {
    var dates = [new Date('01/01/2017'), new Date('01/01/2016'), new Date('12/31/2016')];
    var stringAsDates = ['01/01/2017', '09/12/2004', '11/11/2009'];
    it('Should return empty', function () {
        var result = helper_pipe_1.OrderByDateHelper([]);
        expect(result).not.toBeNull();
        expect(result.length).toBe(0);
    });
    it('Should be order descending', function () {
        var result = helper_pipe_1.OrderByDateHelper(dates, DESCENDING);
        expect(result).not.toBeNull();
        expect(result[0].getTime()).toBeLessThan(result[1].getTime());
        expect(result[1].getTime()).toBeLessThan(result[2].getTime());
    });
    it('Should be order ascending', function () {
        var result = helper_pipe_1.OrderByDateHelper(dates);
        expect(result).not.toBeNull();
        expect(result[0].getTime()).toBeGreaterThan(result[1].getTime());
        expect(result[1].getTime()).toBeGreaterThan(result[2].getTime());
    });
    it('Should be order descending with dates as string values', function () {
        var result = helper_pipe_1.OrderByDateHelper(stringAsDates, DESCENDING);
        expect(result).not.toBeNull();
        expect(new Date(result[0]).getTime()).toBeLessThan(new Date(result[1]).getTime());
        expect(new Date(result[1]).getTime()).toBeLessThan(new Date(result[2]).getTime());
    });
    it('Should be order ascending with dates as string values', function () {
        var result = helper_pipe_1.OrderByDateHelper(stringAsDates);
        expect(result).not.toBeNull();
        expect(new Date(result[0]).getTime()).toBeGreaterThan(new Date(result[1]).getTime());
        expect(new Date(result[1]).getTime()).toBeGreaterThan(new Date(result[2]).getTime());
    });
});
describe('OrderByNumber Test', function () {
    var numbers = [1, 4, 2, 5, 6, 12, 1];
    it('Should return empty', function () {
        var result = helper_pipe_1.OrderByNumberHelper([]);
        expect(result).not.toBeNull();
        expect(result.length).toBe(0);
    });
    it('Should be order descending', function () {
        var result = helper_pipe_1.OrderByNumberHelper(numbers, DESCENDING);
        expect(result).not.toBeNull();
        for (var i = 0; i < result.length - 1; i++) {
            expect(result[i]).toBeGreaterThanOrEqual(result[i + 1]);
        }
    });
    it('Should be order ascending', function () {
        var result = helper_pipe_1.OrderByNumberHelper(numbers);
        expect(result).not.toBeNull();
        for (var i = 0; i < result.length - 1; i++) {
            expect(result[i]).toBeLessThanOrEqual(result[i + 1]);
        }
    });
});
describe('OrderByString Test', function () {
    var strings = ['A', 'C', 'J', 'W', 'T', 'I'];
    it('Should return empty', function () {
        var result = helper_pipe_1.OrderByStringHelper([]);
        expect(result).not.toBeNull();
        expect(result.length).toBe(0);
    });
    it('Should be order descending', function () {
        var result = helper_pipe_1.OrderByStringHelper(strings, DESCENDING);
        expect(result).not.toBeNull();
        for (var i = 0; i < result.length - 1; i++) {
            expect(result[i] > result[i + 1]).toBeTruthy();
        }
    });
    it('Should be order ascending', function () {
        var result = helper_pipe_1.OrderByStringHelper(strings);
        expect(result).not.toBeNull();
        for (var i = 0; i < result.length - 1; i++) {
            expect(result[i] < result[i + 1]).toBeTruthy();
        }
    });
});
describe('OrderByArray Test', function () {
    var objects = [{ id: 1, name: 'John', dateOfBirth: new Date('07/02/1994') },
        { id: 2, name: 'James', dateOfBirth: new Date('11/11/1989') },
        { id: 3, name: 'Michael', dateOfBirth: new Date('09/12/1990') }];
    var compare = function (data, prop, descending) {
        for (var i = 0; i < data.length - 1; i++) {
            var actual = data[i];
            var next = data[i + 1];
            if (descending) {
                expect(actual[prop] > next[prop]).toBeTruthy();
            }
            else {
                expect(actual[prop] < next[prop]).toBeTruthy();
            }
        }
    };
    it('Should return empty', function () {
        var result = helper_pipe_1.OrderByArrayHelper([], '', false);
        expect(result).not.toBeNull();
        expect(result.length).toBe(0);
    });
    it('Should be order descending by number', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'id', true);
        expect(result).not.toBeNull();
        compare(result, 'id', true);
    });
    it('Should be order ascending by number', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'id', false);
        expect(result).not.toBeNull();
        compare(result, 'id', false);
    });
    it('Should be order descending by string', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'name', true);
        expect(result).not.toBeNull();
        compare(result, 'name', true);
    });
    it('Should be order ascending by string', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'name', false);
        expect(result).not.toBeNull();
        compare(result, 'name', false);
    });
    it('Should be order descending by date', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'dateOfBirth', true);
        expect(result).not.toBeNull();
        compare(result, 'dateOfBirth', true);
    });
    it('Should be order ascending by date', function () {
        var result = helper_pipe_1.OrderByArrayHelper(objects, 'dateOfBirth', false);
        expect(result).not.toBeNull();
        compare(result, 'dateOfBirth', false);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
