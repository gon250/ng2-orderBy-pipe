"use strict";
var utils_1 = require("../../src/utils/utils");
describe("isUndefined test", function () {
    it("Should return true", function () { return expect(utils_1.isUndefined(undefined)).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isUndefined("test")).toBeFalsy; });
});
describe("isNull test", function () {
    it("Should return true", function () { return expect(utils_1.isNull(null)).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isNull("test")).toBeFalsy; });
});
describe("isNumber test", function () {
    it("Should return true", function () { return expect(utils_1.isNumber(9)).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isNumber("test")).toBeFalsy; });
});
describe("isInteger test", function () {
    it("Should return true", function () { return expect(utils_1.isInteger(9)).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isInteger(9.5)).toBeFalsy; });
});
describe("isString test", function () {
    it("Should return true", function () { return expect(utils_1.isString("test")).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isString(8)).toBeFalsy; });
});
describe("isObject test", function () {
    it("Should return true", function () { return expect(utils_1.isObject({ id: 1 })).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isObject(8)).toBeFalsy; });
});
describe("isArray test", function () {
    it("Should return true", function () { return expect(utils_1.isArray([1, 2])).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isArray(8)).toBeFalsy; });
});
describe("isDate test", function () {
    it("Should return true", function () { return expect(utils_1.isDate("01/01/2016")).toBeTruthy; });
    it("Should return false", function () { return expect(utils_1.isDate(8)).toBeFalsy; });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QWxDLENBQWtDLENBQUMsQ0FBQztJQUNuRSxFQUFFLENBQUMscUJBQXFCLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQTVCLENBQTRCLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFDcEIsRUFBRSxDQUFDLG9CQUFvQixFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsY0FBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUF2QyxDQUF1QyxDQUFDLENBQUM7SUFDeEUsRUFBRSxDQUFDLHFCQUFxQixFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsY0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUEzQixDQUEyQixDQUFDLENBQUM7QUFDakUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidXRpbHMvdXRpbHMuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBpc1VuZGVmaW5lZCxcclxuICAgIGlzTnVsbCxcclxuICAgIGlzTnVtYmVyLFxyXG4gICAgaXNJbnRlZ2VyLFxyXG4gICAgaXNTdHJpbmcsXHJcbiAgICBpc09iamVjdCxcclxuICAgIGlzQXJyYXksXHJcbiAgICBpc0RhdGVcclxufSBmcm9tIFwiLi4vLi4vc3JjL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5kZXNjcmliZShcImlzVW5kZWZpbmVkIHRlc3RcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIHRydWVcIiwgKCkgPT4gZXhwZWN0KGlzVW5kZWZpbmVkKHVuZGVmaW5lZCkpLnRvQmVUcnV0aHkpO1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIGZhbHNlXCIsICgpID0+IGV4cGVjdChpc1VuZGVmaW5lZChcInRlc3RcIikpLnRvQmVGYWxzeSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoXCJpc051bGwgdGVzdFwiLCAoKSA9PiB7XHJcbiAgICBpdChcIlNob3VsZCByZXR1cm4gdHJ1ZVwiLCAoKSA9PiBleHBlY3QoaXNOdWxsKG51bGwpKS50b0JlVHJ1dGh5KTtcclxuICAgIGl0KFwiU2hvdWxkIHJldHVybiBmYWxzZVwiLCAoKSA9PiBleHBlY3QoaXNOdWxsKFwidGVzdFwiKSkudG9CZUZhbHN5KTtcclxufSk7XHJcblxyXG5kZXNjcmliZShcImlzTnVtYmVyIHRlc3RcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIHRydWVcIiwgKCkgPT4gZXhwZWN0KGlzTnVtYmVyKDkpKS50b0JlVHJ1dGh5KTtcclxuICAgIGl0KFwiU2hvdWxkIHJldHVybiBmYWxzZVwiLCAoKSA9PiBleHBlY3QoaXNOdW1iZXIoXCJ0ZXN0XCIpKS50b0JlRmFsc3kpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiaXNJbnRlZ2VyIHRlc3RcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIHRydWVcIiwgKCkgPT4gZXhwZWN0KGlzSW50ZWdlcig5KSkudG9CZVRydXRoeSk7XHJcbiAgICBpdChcIlNob3VsZCByZXR1cm4gZmFsc2VcIiwgKCkgPT4gZXhwZWN0KGlzSW50ZWdlcig5LjUpKS50b0JlRmFsc3kpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiaXNTdHJpbmcgdGVzdFwiLCAoKSA9PiB7XHJcbiAgICBpdChcIlNob3VsZCByZXR1cm4gdHJ1ZVwiLCAoKSA9PiBleHBlY3QoaXNTdHJpbmcoXCJ0ZXN0XCIpKS50b0JlVHJ1dGh5KTtcclxuICAgIGl0KFwiU2hvdWxkIHJldHVybiBmYWxzZVwiLCAoKSA9PiBleHBlY3QoaXNTdHJpbmcoOCkpLnRvQmVGYWxzeSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoXCJpc09iamVjdCB0ZXN0XCIsICgpID0+IHtcclxuICAgIGl0KFwiU2hvdWxkIHJldHVybiB0cnVlXCIsICgpID0+IGV4cGVjdChpc09iamVjdCh7aWQ6IDF9KSkudG9CZVRydXRoeSk7XHJcbiAgICBpdChcIlNob3VsZCByZXR1cm4gZmFsc2VcIiwgKCkgPT4gZXhwZWN0KGlzT2JqZWN0KDgpKS50b0JlRmFsc3kpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiaXNBcnJheSB0ZXN0XCIsICgpID0+IHtcclxuICAgIGl0KFwiU2hvdWxkIHJldHVybiB0cnVlXCIsICgpID0+IGV4cGVjdChpc0FycmF5KFsxLCAyXSkpLnRvQmVUcnV0aHkpO1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIGZhbHNlXCIsICgpID0+IGV4cGVjdChpc0FycmF5KDgpKS50b0JlRmFsc3kpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiaXNEYXRlIHRlc3RcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIHRydWVcIiwgKCkgPT4gZXhwZWN0KGlzRGF0ZShcIjAxLzAxLzIwMTZcIikpLnRvQmVUcnV0aHkpO1xyXG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIGZhbHNlXCIsICgpID0+IGV4cGVjdChpc0RhdGUoOCkpLnRvQmVGYWxzeSk7XHJcbn0pOyJdfQ==
